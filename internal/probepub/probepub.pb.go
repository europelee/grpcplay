// Code generated by protoc-gen-go. DO NOT EDIT.
// source: probepub.proto

package probepub

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RTTRecord struct {
	Channel              string   `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Ts                   int64    `protobuf:"varint,2,opt,name=ts,proto3" json:"ts,omitempty"`
	Vip                  string   `protobuf:"bytes,3,opt,name=vip,proto3" json:"vip,omitempty"`
	Qip                  string   `protobuf:"bytes,4,opt,name=qip,proto3" json:"qip,omitempty"`
	Method               int32    `protobuf:"varint,5,opt,name=method,proto3" json:"method,omitempty"`
	Rtt                  int32    `protobuf:"varint,6,opt,name=rtt,proto3" json:"rtt,omitempty"`
	Hop                  int32    `protobuf:"varint,7,opt,name=hop,proto3" json:"hop,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RTTRecord) Reset()         { *m = RTTRecord{} }
func (m *RTTRecord) String() string { return proto.CompactTextString(m) }
func (*RTTRecord) ProtoMessage()    {}
func (*RTTRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f122b4f2db24600, []int{0}
}

func (m *RTTRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RTTRecord.Unmarshal(m, b)
}
func (m *RTTRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RTTRecord.Marshal(b, m, deterministic)
}
func (m *RTTRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RTTRecord.Merge(m, src)
}
func (m *RTTRecord) XXX_Size() int {
	return xxx_messageInfo_RTTRecord.Size(m)
}
func (m *RTTRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_RTTRecord.DiscardUnknown(m)
}

var xxx_messageInfo_RTTRecord proto.InternalMessageInfo

func (m *RTTRecord) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *RTTRecord) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *RTTRecord) GetVip() string {
	if m != nil {
		return m.Vip
	}
	return ""
}

func (m *RTTRecord) GetQip() string {
	if m != nil {
		return m.Qip
	}
	return ""
}

func (m *RTTRecord) GetMethod() int32 {
	if m != nil {
		return m.Method
	}
	return 0
}

func (m *RTTRecord) GetRtt() int32 {
	if m != nil {
		return m.Rtt
	}
	return 0
}

func (m *RTTRecord) GetHop() int32 {
	if m != nil {
		return m.Hop
	}
	return 0
}

type PubStat struct {
	ProbeCount           int32    `protobuf:"varint,1,opt,name=probe_count,json=probeCount,proto3" json:"probe_count,omitempty"`
	ElapsedTime          int32    `protobuf:"varint,2,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PubStat) Reset()         { *m = PubStat{} }
func (m *PubStat) String() string { return proto.CompactTextString(m) }
func (*PubStat) ProtoMessage()    {}
func (*PubStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f122b4f2db24600, []int{1}
}

func (m *PubStat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PubStat.Unmarshal(m, b)
}
func (m *PubStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PubStat.Marshal(b, m, deterministic)
}
func (m *PubStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubStat.Merge(m, src)
}
func (m *PubStat) XXX_Size() int {
	return xxx_messageInfo_PubStat.Size(m)
}
func (m *PubStat) XXX_DiscardUnknown() {
	xxx_messageInfo_PubStat.DiscardUnknown(m)
}

var xxx_messageInfo_PubStat proto.InternalMessageInfo

func (m *PubStat) GetProbeCount() int32 {
	if m != nil {
		return m.ProbeCount
	}
	return 0
}

func (m *PubStat) GetElapsedTime() int32 {
	if m != nil {
		return m.ElapsedTime
	}
	return 0
}

func init() {
	proto.RegisterType((*RTTRecord)(nil), "probepub.RTTRecord")
	proto.RegisterType((*PubStat)(nil), "probepub.PubStat")
}

func init() { proto.RegisterFile("probepub.proto", fileDescriptor_6f122b4f2db24600) }

var fileDescriptor_6f122b4f2db24600 = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0xd0, 0xc1, 0x4a, 0xf4, 0x30,
	0x14, 0x05, 0xe0, 0x3f, 0xed, 0xdf, 0x76, 0xe6, 0x8e, 0x0c, 0x1a, 0x41, 0x82, 0x1b, 0x6b, 0x57,
	0x5d, 0xcd, 0x42, 0x37, 0xee, 0x75, 0x2b, 0x94, 0x98, 0xfd, 0xd0, 0xb4, 0x81, 0x04, 0xda, 0x26,
	0xd3, 0xde, 0xf8, 0x26, 0xbe, 0xaf, 0x24, 0xd3, 0x19, 0x77, 0x39, 0x1f, 0x37, 0x70, 0x38, 0xb0,
	0x77, 0xb3, 0x95, 0xca, 0x79, 0x79, 0x70, 0xb3, 0x45, 0x4b, 0x37, 0x97, 0x5c, 0xfd, 0x10, 0xd8,
	0x72, 0x21, 0xb8, 0xea, 0xec, 0xdc, 0x53, 0x06, 0x45, 0xa7, 0xdb, 0x69, 0x52, 0x03, 0x23, 0x25,
	0xa9, 0xb7, 0xfc, 0x12, 0xe9, 0x1e, 0x12, 0x5c, 0x58, 0x52, 0x92, 0x3a, 0xe5, 0x09, 0x2e, 0xf4,
	0x16, 0xd2, 0x6f, 0xe3, 0x58, 0x1a, 0xaf, 0xc2, 0x33, 0xc8, 0xc9, 0x38, 0xf6, 0xff, 0x2c, 0x27,
	0xe3, 0xe8, 0x03, 0xe4, 0xa3, 0x42, 0x6d, 0x7b, 0x96, 0x95, 0xa4, 0xce, 0xf8, 0x9a, 0xc2, 0xe5,
	0x8c, 0xc8, 0xf2, 0x88, 0xe1, 0x19, 0x44, 0x5b, 0xc7, 0x8a, 0xb3, 0x68, 0xeb, 0xaa, 0x4f, 0x28,
	0x1a, 0x2f, 0xbf, 0xb0, 0x45, 0xfa, 0x04, 0xbb, 0x58, 0xf7, 0xd8, 0x59, 0x3f, 0x61, 0x2c, 0x96,
	0x71, 0x88, 0xf4, 0x1e, 0x84, 0x3e, 0xc3, 0x8d, 0x1a, 0x5a, 0xb7, 0xa8, 0xfe, 0x88, 0x66, 0x54,
	0xb1, 0x65, 0xc6, 0x77, 0xab, 0x09, 0x33, 0xaa, 0x97, 0x0f, 0xd8, 0x34, 0xe1, 0x43, 0xe3, 0x25,
	0x7d, 0x03, 0x68, 0xbc, 0x1c, 0xcc, 0xa2, 0xb9, 0x10, 0xf4, 0xfe, 0x70, 0xdd, 0xe6, 0xba, 0xc3,
	0xe3, 0xdd, 0x1f, 0xae, 0x2d, 0xaa, 0x7f, 0x35, 0x91, 0x79, 0x5c, 0xef, 0xf5, 0x37, 0x00, 0x00,
	0xff, 0xff, 0xbc, 0x24, 0xb3, 0x20, 0x4f, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProbePubClient is the client API for ProbePub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProbePubClient interface {
	// client/rdsync-to-rdsync streaming RPC
	//
	// publish rttrecord to rdsync-master.
	PublishRTT(ctx context.Context, opts ...grpc.CallOption) (ProbePub_PublishRTTClient, error)
}

type probePubClient struct {
	cc *grpc.ClientConn
}

func NewProbePubClient(cc *grpc.ClientConn) ProbePubClient {
	return &probePubClient{cc}
}

func (c *probePubClient) PublishRTT(ctx context.Context, opts ...grpc.CallOption) (ProbePub_PublishRTTClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProbePub_serviceDesc.Streams[0], "/probepub.ProbePub/PublishRTT", opts...)
	if err != nil {
		return nil, err
	}
	x := &probePubPublishRTTClient{stream}
	return x, nil
}

type ProbePub_PublishRTTClient interface {
	Send(*RTTRecord) error
	CloseAndRecv() (*PubStat, error)
	grpc.ClientStream
}

type probePubPublishRTTClient struct {
	grpc.ClientStream
}

func (x *probePubPublishRTTClient) Send(m *RTTRecord) error {
	return x.ClientStream.SendMsg(m)
}

func (x *probePubPublishRTTClient) CloseAndRecv() (*PubStat, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PubStat)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProbePubServer is the server API for ProbePub service.
type ProbePubServer interface {
	// client/rdsync-to-rdsync streaming RPC
	//
	// publish rttrecord to rdsync-master.
	PublishRTT(ProbePub_PublishRTTServer) error
}

// UnimplementedProbePubServer can be embedded to have forward compatible implementations.
type UnimplementedProbePubServer struct {
}

func (*UnimplementedProbePubServer) PublishRTT(srv ProbePub_PublishRTTServer) error {
	return status.Errorf(codes.Unimplemented, "method PublishRTT not implemented")
}

func RegisterProbePubServer(s *grpc.Server, srv ProbePubServer) {
	s.RegisterService(&_ProbePub_serviceDesc, srv)
}

func _ProbePub_PublishRTT_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProbePubServer).PublishRTT(&probePubPublishRTTServer{stream})
}

type ProbePub_PublishRTTServer interface {
	SendAndClose(*PubStat) error
	Recv() (*RTTRecord, error)
	grpc.ServerStream
}

type probePubPublishRTTServer struct {
	grpc.ServerStream
}

func (x *probePubPublishRTTServer) SendAndClose(m *PubStat) error {
	return x.ServerStream.SendMsg(m)
}

func (x *probePubPublishRTTServer) Recv() (*RTTRecord, error) {
	m := new(RTTRecord)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ProbePub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "probepub.ProbePub",
	HandlerType: (*ProbePubServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PublishRTT",
			Handler:       _ProbePub_PublishRTT_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "probepub.proto",
}
